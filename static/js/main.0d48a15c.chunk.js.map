{"version":3,"sources":["components/infoBox/InfoBox.js","components/util/util.js","components/map/Map.js","components/table/Table.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","isCases","isRecovered","isDeaths","props","Card","onClick","className","CardContent","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","Mapa","code","countries","casesType","center","zoom","TileLayer","url","attribution","data","map","country","index","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","key","Popup","style","backgroundImage","flag","dataMapGlobal","iso2","dataMap","Table","App","useState","setCountries","setCountry","setCountryInfo","tableDate","setTableDate","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","useEffect","axios","method","then","res","a","name","value","sortedData","sort","b","getCountries","classes","makeStyles","root","background","useStyles","onCountryChange","e","countryCode","target","FormControl","Select","onChange","variant","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d48a15c.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent } from '@material-ui/core';\nimport './InfoBox.css';\n\nfunction InfoBox ({ title, cases, total, isCases, isRecovered, isDeaths, ...props }){\n    return (\n        <Card onClick={props.onClick} className={`infoBox ${isCases && 'casesBox' } \n        ${isRecovered && 'recoveredBox' } ${isDeaths && 'deathsBox' }`}> \n            <CardContent>\n                <h3 className='infoTitle' color='textSecondary'>{title}</h3>\n                <h2 className='infoCasesBox'>{cases}</h2>\n                <h3 className='infoTotalBox' color='textSecondary'>{total} Total</h3>\n            </CardContent>\n        </Card>\n    );\n}\n \nexport default InfoBox;","import React from 'react';\nimport { Circle, Popup } from 'react-leaflet';\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#EBD900\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n    let sortedData = [...data];\n    \n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n    //   if (a.cases > b.cases) {\n    //     return -1;\n    //   } else {\n    //     return 1;\n    //   }\n    // });\n    // return sortedData;\n};\n\nexport const dataMap = (data, casesType = 'cases', code) => \n  data.map((country) => (\n    country.countryInfo.iso2 === code\n    ? <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n    <Popup>\n      <div className='infoContainer'>\n        <div className='infoFlag' style={{ backgroundImage: `url(${country.countryInfo.flag})` }}/>\n        <div className='infoName'>{country.country}</div>\n        <div className='infoCases'>Cases: {country.cases}</div>\n        <div className='infoRecovered'>Recovered: {country.recovered}</div>\n        <div className='infoDeaths'>Deaths: {country.deaths}</div>\n      </div>\n    </Popup>\n    </Circle>\n    : ''\n  ));\n\n  export const dataMapGlobal = (data, casesType = 'cases') => \n  data.map((country, index) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n      key={index}\n    >\n      <Popup>\n        <div className='infoContainer'>\n          <div className='infoFlag' style={{ backgroundImage: `url(${country.countryInfo.flag})` }}/>\n          <div className='infoName'>{country.country}</div>\n          <div className='infoCases'>Cases: {country.cases}</div>\n          <div className='infoRecovered'>Recovered: {country.recovered}</div>\n          <div className='infoDeaths'>Deaths: {country.deaths}</div>\n        </div>\n      </Popup>\n    </Circle>\n    ));\n","import React from 'react';\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\nimport './Map.css';\nimport { dataMap, dataMapGlobal } from '../util/util';\n            \nfunction Mapa({ code, countries, casesType, center, zoom }) {\n\n    return (\n        <div className='map'>\n            <LeafletMap center={center} zoom={zoom}>\n              <TileLayer\n                url= \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                //'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png'\n                //\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution= '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                //'&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n                //'&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n              {code === 'Global' ? dataMapGlobal(countries, casesType) : dataMap(countries, casesType, code)}\n            </LeafletMap>    \n        </div>\n    )\n}\n\nexport default Mapa;\n","import React from 'react';\nimport './Table.css';\n\nfunction Table({ countries }) {\n    return (\n        <div className='table'>\n            <table>\n                <tbody>\n                    {\n                        countries.map(({country, cases}, index) => (\n                        <tr key={index}>\n                            <td>{country}</td>\n                            <td><strong>{cases}</strong></td>\n                            \n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Table\n","import React, {useState, useEffect} from 'react';\nimport InfoBox from './components/infoBox/InfoBox';\nimport Map from './components/map/Map';\nimport Table from './components/table/Table';\nimport axios from 'axios';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core';\nimport { sortData } from './components/util/util';\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('Global');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableDate, setTableDate] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(() => {\n    axios({\n      method: 'GET',\n      url: 'https://disease.sh/v3/covid-19/all'\n    })\n    .then(res => {\n      setCountryInfo(res.data); \n    })\n  }, [])\n\n  useEffect(() => {\n    const getCountries = async () => {\n      await axios({\n        method: 'GET',\n        url: 'https://disease.sh/v3/covid-19/countries'\n      })\n      .then(res => { \n        //console.log(res.data)\n        const countries = res.data.map((country)=>({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }));\n        setCountries(countries);\n        const sortedData = sortData(res.data)\n        setTableDate(sortedData)\n        setMapCountries(res.data);\n\n      });\n    };\n    getCountries();\n  }, []);\n\n  const useStyles = makeStyles({\n    root: {\n      background: 'white'\n    },\n  });\n\n  const classes = useStyles();\n  \n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url = countryCode === 'Global' \n                ? 'https://disease.sh/v3/covid-19/all'\n                : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await axios({\n      method: 'GET',\n      url: url\n    })\n    .then(res => {\n      setCountry(countryCode);\n      setCountryInfo(res.data);\n      if (countryCode === 'Global'){\n        setMapCenter({ lat: 34.80746, lng: -40.4796 });  \n      } else{\n        setMapCenter([res.data.countryInfo.lat, res.data.countryInfo.long]);\n      }\n      setMapZoom(3);\n    })\n  }\n  return (\n    <div className='app'>\n      <h1>React.js COVID-19</h1>\n      <div className='appHeader'>\n        <Map  center={mapCenter}\n              zoom={mapZoom}\n              countries={mapCountries}\n              casesType={casesType}\n              code={country}\n        />\n      </div>\n\n      <div className='appLeft'>\n\n        <FormControl className='appDropdown'>\n          <Select className={classes.root} onChange={onCountryChange} variant='outlined' value={country}>\n            <MenuItem value='Global'>Global</MenuItem>\n            {\n              countries.map((country)=>\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              )\n            }\n          </Select>\n        </FormControl>\n        \n        <div className='appInfoBoxs'>\n          <InfoBox  onClick={ (e) => setCasesType('cases') }\n                    title='Coronavirus Cases' \n                    cases={countryInfo.todayCases} \n                    total={countryInfo.cases}\n                    isCases\n          />\n          <InfoBox  onClick={ (e) => setCasesType('recovered') }\n                    title='Recovered' \n                    cases={countryInfo.todayRecovered} \n                    total={countryInfo.recovered}\n                    isRecovered\n          />\n          <InfoBox  onClick={ (e) => setCasesType('deaths') }\n                    title='Deaths' \n                    cases={countryInfo.todayDeaths} \n                    total={countryInfo.deaths}\n                    isDeaths\n          />\n        </div> \n\n        <Card className='appRight'>\n          <CardContent>\n            <h2>Cases by Country </h2>\n            <Table countries={tableDate}/>\n          </CardContent>\n        </Card>\n      </div> \n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}